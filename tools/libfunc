#!/bin/bash

###################################################
################## 表格函数 #######################
###################################################

function html_echo(){
	echo "$@" >>report/${DIP}-report.html
}
### <table>标签以及<th>标签定义 ###
## exp: func_tr_start "hostname" "Eth name"
function func_tr_start(){
	html_echo "<table id=\"summary\" >
  <tr>"
	for num in "$@";do
	  html_echo "    <th>$num</th>"
	done
	html_echo "  </tr>"
}

### 表开头，可选择标题占多列 ###
## exp: func_tb_start 2 "col1" "col2"
function func_tb_start(){
local var
local num=$1
shift
	html_echo "<br>
<table border='1'>
<tr>"
	for var in "$@";
	do	
		html_echo "<th class='titulo' colspan='$num'>$var</td>"
	done
html_echo "</tr>"
}
function func_tb_end(){
	html_echo "</table>
<hr>"
}

### 表头###
function func_th(){
       local num=${2:-1}
        html_echo "<th class='titulo' rowspan='$num'>$1</th>"
}

function func_th_col(){
       local num=${2:-1}
        html_echo "<th class='titulo' colspan='$num'>$1</th>"
}
### 换行 ###
function func_tr(){
        html_echo "  <tr>"
}

function func_tr_end(){
        html_echo "  </tr>"
}
###  换列 ###
function func_td(){
        for num in "$@";do
                html_echo "    <td>$num</td>"
        done
}

function func_tab (){
local i
local num=${1:-1}
    for ((i=1;i<=$num;i++));do
        html_echo "<br>"
    done
}

### html头信息 ###
function func_html_header(){
html_echo "<HTML>
  <HEAD>
    <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"/>
    <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"/> 
  <style>
    body {
      background-color: #f2f2f2;
      color: #333;
      margin: 0 auto;
      width: 960px;
    }
    #summary {
      width: 960px;
      margin-bottom: 20px;
    }
    #summary th {
      background-color: skyblue;
      padding: 5px 12px;
    }
    #summary td {
      background-color: lightblue;
      text-align: center;
      padding: 4px 8px;
    }
  </style>
  <title>
    ${title}
  </title>
  </HEAD>
  <BODY align='center'>
日期: <strong>$(date)</strong><br>
Information for host <strong>$HOST</strong><br>
Last reboot time: <strong>` who -b`</strong><br><br>"
}

#############################################################
################### 其他函数 ################################
#############################################################
command_exists() {
        command -v "$@" >/dev/null 2>&1
}
RED='\e[1;31m'
GREEN='\e[1;32m'
NC='\e[0m'

function red_echo() {
      echo -e "${RED}$1 ${NC}"
}

function green_echo() {
      echo -e "${GREEN}$1 ${NC}"
}

function reg_grep() {
   echo "$1" | grep -E "$2" > /dev/null
   echo $?
}

function count_down() {
    for count in `seq $1 -1 1`
    do
        echo "Waiting for $count second!"
        sleep 1
    done
}

function build_slave_tar() {
    echo "Begin to build slave tar!"
    count_down 3
    cd $WORK_DIR
    # creat slave.tar
    if [ -f slave.tar ];then
        while true
        do
            read -r -p "File slave.tar already exists, will rebuild it? [Y/n] " input
            case $input in
                [yY][eE][sS]|[yY])
                    rm -rf slave.tar
                    break
                    ;;
                [nN][oO]|[nN])
                    return
                    ;;
                *)
                    red_echo "ERROR: Invalid input..."
                    ;;
            esac
        done
    fi
    tar cvf $WORK_DIR/slave.tar -C $WORK_DIR ./*
    echo "Building slave tar compeleted!"
}

function start_http_zh(){
echo "信息采集完成，你可以选择启动一个http server来查看或者下载文件到本地电脑"
while true;do
read -p "是否要启动http Server?:[y|n]" -t 60 answer
case $answer in
        [Yy]|[Yy][Ee][Ss])
                echo "将会启动一个http Server"
                break
                ;;
        [Nn]|[Nn][Oo])
                echo "bye！" && exit 0
                ;;
        *)
                echo "请输入正确的单词y/n yes/no"
                ;;
esac
   if [ -z $answer ];then
         echo "输入超时或错误，退出脚本！"
         exit
   fi
done
while true;do
read -p "请输入要启动的端口，例如[80|8000|8888]:" -t 60 Port
    if [[ $Port =~ ^[0-9]+$ ]];then
        ss -tunl|grep $Port >>/dev/null 2>&1
        if [ $? -eq 0 ];then
            echo "端口已经被占用，请再次输入"
        else
            echo "正在启动hhtp server:${DIP}:$Port"
            nohup python http.py $Port >>/tmp/http.log 2>&1 &
            echo "HTTP服务进程的PID是:$(jobs -l|awk '/http.py/{print $2}')"
            echo "你可以使用这个url在浏览器查看结果: http://${DIP}:$Port/report/"
            break
        fi
    else
        echo "检测到非数字"
    fi
done
}

function start_http_en(){
echo "The information is collected, you can choose to launch an HTTP server to view or download the files to your local computer"
while true;do
read -p "Are you sure to launch an HTTP Server?:[y|n]" -t 60 answer
case $answer in
        [Yy]|[Yy][Ee][Ss])
                echo "Will lunch an HTTP Server"
                break
                ;;
        [Nn]|[Nn][Oo])
                echo "bye！" && exit 0
                ;;
        *)
                echo "Please input: y/n yes/no"
                ;;
esac
  if [ -z $answer ];then
        echo "More than 60s not received from input or input Error,exit script!"
        exit
  fi
done
while true;do
read -p "Please type the  port for HTTP Server,exp:[80|8000|8888]:" -t 60 Port
    if [[ $Port =~ ^[0-9]+$ ]];then
        ss -tunl|grep $Port >>/dev/null 2>&1
        if [ $? -eq 0 ];then
            echo "The port already in use,please input another port again"
        else
            echo "Lunch HTTP server at:${DIP}:$Port"
            nohup python http.py $Port >>/tmp/http.log 2>&1 &
            echo "HTTP server's PID is: $(jobs -l|awk '/http.py/{print $2}')"
            echo "You can use the following url to view: http://${DIP}:$Port/report/"
            break
        fi
    else
        echo "The input is not a number"
    fi
done
}

CheckIPADDR(){
echo $1|grep "^[0-9]\{1,3\}\.\([0-9]\{1,3\}\.\)\{2\}[0-9]\{1,3\}$" > /dev/null;
    if [ $? -ne 0 ]
    then
        red_echo "ERROR:$1 is not a ip" 
        exit 12
    fi
    ipaddr=$1
    a=`echo $ipaddr|awk -F . '{print $1}'` 
    b=`echo $ipaddr|awk -F . '{print $2}'`
    c=`echo $ipaddr|awk -F . '{print $3}'`
    d=`echo $ipaddr|awk -F . '{print $4}'`
    for num in $a $b $c $d
    do
       if [ $num -gt 255 ] || [ $num -lt 0 ] 
       then
           red_echo "ERROR: invalid num: <$num>"
           exit 12
       fi
    done
}
